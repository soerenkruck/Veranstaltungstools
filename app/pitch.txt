package de.doerte.veranstaltungstools;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;

import androidx.cardview.widget.CardView;
import androidx.fragment.app.Fragment;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Description;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.DataSet;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import be.tarsos.dsp.AudioDispatcher;
import be.tarsos.dsp.AudioEvent;
import be.tarsos.dsp.AudioProcessor;
import be.tarsos.dsp.Oscilloscope;
import be.tarsos.dsp.io.TarsosDSPAudioFormat;
import be.tarsos.dsp.io.android.AudioDispatcherFactory;
import be.tarsos.dsp.util.fft.FFT;
import de.doerte.veranstaltungstools.analyse.Analyser;


/**
 * A simple {@link Fragment} subclass.
 * Use the {@link StartFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class StartFragment extends Fragment implements Oscilloscope.OscilloscopeEventHandler {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    public View root;

    private TextView dbView;
    private Analyser analyser;

    private AudioDispatcher dispatcher;
    private LineChart realTimeDataChart;

    int sampleRate = 32000;
    int bufferSize = 2048;
    int overlap = 4;

    public StartFragment() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment StartFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static StartFragment newInstance(String param1, String param2) {
        StartFragment fragment = new StartFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        root = inflater.inflate(R.layout.fragment_start, container, false);

        realTimeDataChart = (LineChart) root.findViewById(R.id.realTimeChart);
        dbView = (TextView) root.findViewById(R.id.dbTextView);
        dbView.setText("hsfbrejh");

        analyser = new Analyser();

        List<Entry> entries = new ArrayList<Entry>();

        for (int i = 0; i < 100; i++) {
            if (i > 2) {
                entries.add(new Entry(i, (float) (entries.get(i-1).getY() + (new Random().nextInt(4)) - 1.5)));
            } else {
                entries.add(new Entry(i, new Random().nextInt(4)));
            }
        }

        YAxis yAxis = realTimeDataChart.getAxisRight();
        yAxis.setDrawZeroLine(true);
        yAxis.setAxisMaximum(1);
        yAxis.setAxisMinimum(-1);

        realTimeDataChart.getAxisRight().setEnabled(false);

        final LineDataSet dataSet = new LineDataSet(entries, "TestEntries");
        dataSet.setColor(Color.BLUE);
        dataSet.setValueTextColor(Color.BLACK);
        dataSet.setAxisDependency(YAxis.AxisDependency.RIGHT);
        dataSet.setLabel("Zuf√§lige Werte.");

        final LineData lineData = new LineData(dataSet);
        realTimeDataChart.setData(lineData);
        Description description = new Description();
        description.setText("Oszillator");
        realTimeDataChart.setDescription(description);
        realTimeDataChart.invalidate();

        createDispatcher();

        return root;

    }

    public void paint(float[] data, AudioEvent event) {
        List<Entry> newEntries = new ArrayList<Entry>();

        for (int i = 0; i < (data.length-1); i++) {
            newEntries.add(new Entry(i, data[i]+0.5f));
        }

        //System.out.println(data[data.length-2]);

        LineDataSet dataSet = new LineDataSet(newEntries, "TestEntries");
        dataSet.setColor(Color.BLUE);
        dataSet.setValueTextColor(Color.BLACK);
        dataSet.setLabel("Sound");

        LineData lineData = new LineData(dataSet);
        realTimeDataChart.setData(lineData);
        realTimeDataChart.invalidate();
    }

    AudioProcessor fftProcessor = new AudioProcessor() {

        FFT fft = new FFT(bufferSize);
        float[] ampluitudes = new float[bufferSize/2];

        @Override
        public boolean process(AudioEvent audioEvent) {
            float[] audioFloatBuffer = audioEvent.getFloatBuffer();
            float[] transformBuffer = new float[bufferSize*2];
            System.arraycopy(audioFloatBuffer, 0, transformBuffer, 0, audioFloatBuffer.length);
            fft.forwardTransform(transformBuffer);
            fft.modulus(transformBuffer, ampluitudes);
            paint(pi);
        }

        @Override
        public void processingFinished() {

        }
    };

    private void createDispatcher() {
        if (dispatcher != null) {
            dispatcher.stop();
        }

        final TarsosDSPAudioFormat format = new TarsosDSPAudioFormat(Float.valueOf(sampleRate), 16, 1, true, false);

        dispatcher = AudioDispatcherFactory.fromDefaultMicrophone(sampleRate, bufferSize, overlap);
        dispatcher.addAudioProcessor(new Oscilloscope(this));

        new Thread(dispatcher, "Audio dispatching").start();
    }

    @Override
    public void handleEvent(float[] floats, AudioEvent audioEvent) {
        paint(floats, audioEvent);
    }
}
